## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: MIT-0
version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto21
    commands:
      - mvn --version
      - java -version
    finally:
      - echo "This always runs even if the installation command fails"

  pre_build:
    commands:
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner-cli-5.0.1.3006-linux.zip
      - mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
      - rm -rf sonar-scanner-cli-5.0.1.3006-linux.zip
      - mvn -version
      - chmod -R 775 /opt/sonar-scanner
      - echo "Stage pre_build completed"

  build:
    commands:
      - echo "Running SonarQube scan"
      - echo "Creating sonar-project.properties file"
      - SONARQUBE_TOKEN=$(aws ssm get-parameter --name /devsecops/SONARQUBE_TOEKN --query "Parameter.Value" --output text)
      - SONARQUBE_HOST=$(aws ssm get-parameter --name /devsecops/SONARQUBE_HOST  --query "Parameter.Value" --output text)
      - echo "sonar.sources=src/main/java" >> sonar-project.properties
      - echo "sonar.java.binaries=target/classes" >> sonar-project.properties
      - echo "sonar.host.url=$SONARQUBE_HOST" >> sonar-project.properties
      - echo "sonar.login=$SONARQUBE_TOKEN" >> sonar-project.properties
      - echo "sonar.projectKey=secureline-${GitHubRepo}" >> sonar-project.properties
      - echo "sonar.projectName=secureline-${GitHubRepo}" >> sonar-project.properties
      - cat sonar-project.properties
      - cd $CODEBUILD_SRC_DIR
      - echo "Build stage completed"
      - echo "Compiling Java files"
      - mvn clean compile
      - cd $CODEBUILD_SRC_DIR
      - /opt/sonar-scanner/bin/sonar-scanner > sonarqube_scanreport.json
      - echo "Running SonarQube scan"
      - cd $CODEBUILD_SRC_DIR
      - sudo mvn -f pom.xml sonar:sonar -Dsonar.host.url=$SONARQUBE_HOST -Dproject.settings=sonar-project.properties -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.scanner.disableCertificateValidation=true > sonarqube_scanreport.json
      - echo "Build stage completed"

  post_build:
    commands:
      - echo "Uploading scan results"
      - cat sonarqube_scanreport.json
      - sonar_link=$(cat sonarqube_scanreport.json | grep -oP "https?://[^, ]+" | head -n 1 || echo "URL not found")
      - sonar_task_id=$(cat sonarqube_scanreport.json | grep -oP "task\?id=[^ ]+" | cut -d'=' -f2)
      - |
        echo "Checking SonarQube background task status"
        stat="PENDING"
        while [ "$stat" != "SUCCESS" ]; do
          if [[ "$stat" == "FAILED" || "$stat" == "CANCELLED" ]]; then
            echo "SonarQube task $sonar_task_id failed"
            exit 1
          fi
          stat=$(curl -u $SONARQUBE_TOKEN $SONARQUBE_HOST/api/ce/task?id=$sonar_task_id | jq -r '.task.status')
          sleep 5
        done
      - echo "SonarQube background task completed successfully"
      - sonar_analysis_id=$(curl -u $SONARQUBE_TOKEN $SONARQUBE_HOST/api/ce/task?id=$sonar_task_id | jq -r '.task.analysisId')
      - quality_status=$(curl -u $SONARQUBE_TOKEN $SONARQUBE_HOST/api/qualitygates/project_status?analysisId=$sonar_analysis_id | jq -r '.projectStatus.status')
      - |
        echo "Checking SonarQube quality gate status..."

        if [ -z "$quality_status" ]; then
          echo "[ERROR] SonarQube quality_status is empty. Exiting."
          exit 1
        fi

        if [ "$quality_status" = "ERROR" ] || [ "$quality_status" = "WARN" ]; then
          echo "SonarQube quality gate failed: $quality_status"
          exit 1
        elif [ "$quality_status" = "OK" ]; then
          echo "SonarQube quality gate passed: $quality_status"
        else
          echo "Unexpected SonarQube quality status: $quality_status"
          exit 1
        fi


artifacts:
  type: zip
  files:
    - '**/*'
